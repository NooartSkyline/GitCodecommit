using System;
using System.Data;
using SourceCode.SmartObjects.Client;
using SourceCode.Hosting.Client.BaseAPI;
using System.Text;
using System.Data.Common;
using System.IO;
using System.Xml.XPath;


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     .Net class implementation for SmartObject ZGET_ARTICLE_DH_APP_BIN.
//     Changes to this file may cause incorrect behavior
// </auto-generated>
//------------------------------------------------------------------------------

    
namespace 192.168.0.159.SmartObjects
{

    public class ZGET_ARTICLE_DH_APP_BIN : ZGET_ARTICLE_DH_APP_BIN_properties
    {
        #region Fields (4)

        private readonly string _connectionString;
        private SmartObject _smartObject;
        private const string cHOST = "192.168.0.159";
        private const uint cPORT = 5555;

        #endregion Fields

        #region Constructors (2)

        public ZGET_ARTICLE_DH_APP_BIN(string connectionString)
        {
            _connectionString = connectionString;
            this.GetSmartObject();
        }
        public ZGET_ARTICLE_DH_APP_BIN()
        {
            SCConnectionStringBuilder hostServerConnectionString = new SCConnectionStringBuilder();
            hostServerConnectionString.Host = cHOST;
            hostServerConnectionString.Port = cPORT;
            hostServerConnectionString.IsPrimaryLogin = true;
            hostServerConnectionString.Integrated = true;
            _connectionString = hostServerConnectionString.ConnectionString;
            this.GetSmartObject();
        }

        #endregion Constructors

        #region Methods (8)

        // Public Methods (2) 

        public DataTable ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP(string p_I_LGORT,string p_I_WERKS)        {
            // Verify required properties

            if (p_I_LGORT == null)
            {
                throw new NullReferenceException("Value required for property [p_I_LGORT]");
            }
            if (p_I_WERKS == null)
            {
                throw new NullReferenceException("Value required for property [p_I_WERKS]");
            }

            // Set method to execute
            _smartObject.MethodToExecute = "ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP";

            // Assign Input properties
            if (p_I_EAN11 != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["p_I_EAN11"],p_I_EAN11);
            }
            if (p_I_LANGU != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["p_I_LANGU"],p_I_LANGU);
            }
            if (p_I_LGORT != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["p_I_LGORT"],p_I_LGORT);
            }
            if (p_I_MATNR != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["p_I_MATNR"],p_I_MATNR);
            }
            if (p_I_WERKS != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["p_I_WERKS"],p_I_WERKS);
            }
            if (E_BIN_UNIT != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["E_BIN_UNIT"],E_BIN_UNIT);
            }
            if (E_BIN_WM_NUM != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["E_BIN_WM_NUM"],E_BIN_WM_NUM);
            }
            if (E_BIN_LOCATION != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["E_BIN_LOCATION"],E_BIN_LOCATION);
            }

            try
            {
                SmartObjectClientServer soServer = CreateConnection();

                // Execute SmartObject
                using (soServer.Connection)
                {
                    return soServer.ExecuteListDataTable(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public DbDataReader ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP_Reader(string p_I_LGORT,string p_I_WERKS)        {
            // Verify required properties

            if (p_I_LGORT == null)
            {
                throw new NullReferenceException("Value required for property [p_I_LGORT]");
            }
            if (p_I_WERKS == null)
            {
                throw new NullReferenceException("Value required for property [p_I_WERKS]");
            }

            // Set method to execute
            _smartObject.MethodToExecute = "ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP";

            // Assign Input properties
            if (p_I_EAN11 != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["p_I_EAN11"],p_I_EAN11);
            }
            if (p_I_LANGU != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["p_I_LANGU"],p_I_LANGU);
            }
            if (p_I_LGORT != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["p_I_LGORT"],p_I_LGORT);
            }
            if (p_I_MATNR != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["p_I_MATNR"],p_I_MATNR);
            }
            if (p_I_WERKS != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["p_I_WERKS"],p_I_WERKS);
            }
            if (E_BIN_UNIT != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["E_BIN_UNIT"],E_BIN_UNIT);
            }
            if (E_BIN_WM_NUM != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["E_BIN_WM_NUM"],E_BIN_WM_NUM);
            }
            if (E_BIN_LOCATION != null)
            {
                SetPropertyValue(_smartObject.ListMethods["ZGET_ARTICLE_DH_APP_E_BIN_ZGET_ARTICLE_DH_APP"].InputProperties["E_BIN_LOCATION"],E_BIN_LOCATION);
            }

            try
            {
                SmartObjectClientServer soServer = CreateConnection();

                // Execute SmartObject
                using (soServer.Connection)
                {
                    return soServer.ExecuteListReader(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }


        // Private Methods (6) 

        private void ClearProperties()
        {
            foreach (SmartProperty property in _smartObject.Properties)
            {
                property.Clear();
                property.ValueBehaviour = ValueBehaviour.None;
            }
        }

        private SmartObjectClientServer CreateConnection()
        {
            SmartObjectClientServer soServer = new SmartObjectClientServer();
            soServer.CreateConnection();
            soServer.Connection.Open(_connectionString);
            return soServer;
        }

        private Exception DisplayError(Exception ex)
        {
            if (ex is SmartObjectException)
            {
                return DisplayError(ex as SmartObjectException);
            }
            else
            {
                return ex;
            }
        }

        private Exception DisplayError(SmartObjectException smartObjectException)
        {
            StringBuilder errorMessage = new StringBuilder();
            foreach (SmartObjectExceptionData smartobjectExceptionData in smartObjectException.BrokerData)
            {
                string message = smartobjectExceptionData.Message;
                string service = smartobjectExceptionData.ServiceName;
                string serviceGuid = smartobjectExceptionData.ServiceGuid;
                string severity = smartobjectExceptionData.Severity.ToString();
                string innermessage = smartobjectExceptionData.InnerExceptionMessage;
                errorMessage.AppendLine(message);
                errorMessage.AppendLine();
                errorMessage.AppendLine("Service: " + service);
                errorMessage.AppendLine("Service Guid: " + serviceGuid);
                errorMessage.AppendLine("Severity: " + severity);
                if (!string.IsNullOrEmpty(innermessage))
                {
                    errorMessage.AppendLine("InnerException Message: " + innermessage);
                }
            }
            return new Exception(errorMessage.ToString());
        }

        private void GetSmartObject()
        {
            SmartObjectClientServer clientServer = CreateConnection();
            using (clientServer.Connection)
            {
                _smartObject = clientServer.GetSmartObject("ZGET_ARTICLE_DH_APP_BIN");
            }
        }

  private static void SetPropertyValue(SmartProperty smartProperty, object value)
        {
            if (value == null)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Unchanged;
                smartProperty.Value = null;
            }
            else if (value == DBNull.Value)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Clear;
                smartProperty.Value = null;
            }
            else if (value.ToString() == string.Empty)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Empty;
                smartProperty.Value = string.Empty;
            }
            else
            {
                smartProperty.ValueBehaviour = ValueBehaviour.None;
                smartProperty.Value = value.ToString();
            }
        }

        #endregion Methods
    }

 public class ZGET_ARTICLE_DH_APP_BIN_properties
    {
        #region Fields (3)

        private string _E_BIN_UNIT;
        private string _E_BIN_WM_NUM;
        private string _E_BIN_LOCATION;

        #endregion Fields

        #region Constructors (1)

        protected ZGET_ARTICLE_DH_APP_BIN_properties()
        {
        }

        #endregion Constructors

        #region Properties (3)

        public string E_BIN_UNIT
        {
            get
            {
                return _E_BIN_UNIT;
            }
            set
            {
                _E_BIN_UNIT = value;
            }
        }

        public string E_BIN_WM_NUM
        {
            get
            {
                return _E_BIN_WM_NUM;
            }
            set
            {
                _E_BIN_WM_NUM = value;
            }
        }

        public string E_BIN_LOCATION
        {
            get
            {
                return _E_BIN_LOCATION;
            }
            set
            {
                _E_BIN_LOCATION = value;
            }
        }


        #endregion Properties

        #region Methods (4)

        // Protected Methods (4) 
        protected ZGET_ARTICLE_DH_APP_BIN_properties GetPropertiesObject()
        {
            return new ZGET_ARTICLE_DH_APP_BIN_properties();
        }

        protected static string SetProperty_E_BIN_UNIT(string E_BIN_UNIT)
        {
                        if(E_BIN_UNIT == null)
            {
                return null;
            }


            if(E_BIN_UNIT == string.Empty)
            {
                return null;
            }

            return E_BIN_UNIT;
        }

        protected static string SetProperty_E_BIN_WM_NUM(string E_BIN_WM_NUM)
        {
                        if(E_BIN_WM_NUM == null)
            {
                return null;
            }


            if(E_BIN_WM_NUM == string.Empty)
            {
                return null;
            }

            return E_BIN_WM_NUM;
        }

        protected static string SetProperty_E_BIN_LOCATION(string E_BIN_LOCATION)
        {
                        if(E_BIN_LOCATION == null)
            {
                return null;
            }


            if(E_BIN_LOCATION == string.Empty)
            {
                return null;
            }

            return E_BIN_LOCATION;
        }


        #endregion Methods

    }

   #region Object Classes

    public abstract class NamedObject
    {

        #region Fields (3)

        private string _name;
        private string _value;
        protected const string SCNULL = "scnull";

        #endregion Fields

        #region Constructors (2)

        public NamedObject(string name, string value)
        {
            _name = name;
            _value = value;
        }

        public NamedObject(string inputValue)
        {
            this.FromValue(inputValue);
        }

        #endregion Constructors

        #region Properties (2)

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        #endregion Properties

        #region Methods (3)

        // Public Methods (3) 

        public abstract void FromValue(string inputValue);

        public override string ToString()
        {
            return ToValue();
        }

        public abstract string ToValue();

        #endregion Methods

    }

    public class ImageObject : NamedObject
    {

        #region Constructors (2)

        public ImageObject(string name, string value)
            : base(name, value)
        {
        }

        public ImageObject(string inputValue)
            : base(inputValue)
        {
        }

        #endregion Constructors

        #region Methods (2)

        // Public Methods (2) 
        public override void FromValue(string inputValue)
        {
            if (!string.IsNullOrEmpty(inputValue))
            {
                using (StringReader reader = new StringReader(inputValue))
                {
                    XPathDocument xDoc = new XPathDocument(reader);
                    XPathNavigator xNav = xDoc.CreateNavigator();
                    string imageNameValue = xNav.SelectSingleNode("image/name").InnerXml;
                    string contentValue = xNav.SelectSingleNode("image/content").InnerXml;
                    if (imageNameValue == SCNULL)
                        this.Name = string.Empty;
                    else
                        this.Name = imageNameValue;
                    if (contentValue == SCNULL)
                        this.Value = string.Empty;
                    else
                        this.Value = contentValue;
                }
            }
            else
            {
                this.Value = string.Empty;
                this.Name = string.Empty;
            }
        }

        public override string ToValue()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<image>");
            if (this.Name == null)
            {
                sb.Append("<name/>");
            }
            else
            {
                sb.Append("<name>");
                sb.Append(this.Name);
                sb.Append("</name>");
            }
            if (this.Value == null)
            {
                sb.Append("<content/>");
            }
            else
            {
                sb.Append("<content>");
                sb.Append(this.Value);
                sb.Append("</content>");
            }
            sb.Append("</image>");
            return sb.ToString();
        }

        #endregion Methods

    }

    public class FileObject : NamedObject
    {

        #region Constructors (2)

        public FileObject(string name, string value)
            : base(name, value)
        {
        }

        public FileObject(string inputValue)
            : base(inputValue)
        {
        }

        #endregion Constructors

        #region Methods (2)

        // Public Methods (2) 
        public override void FromValue(string inputValue)
        {
            if (!string.IsNullOrEmpty(inputValue))
            {
                using (StringReader reader = new StringReader(inputValue))
                {
                    XPathDocument xDoc = new XPathDocument(reader);
                    XPathNavigator xNav = xDoc.CreateNavigator();
                    string fileNameValue = xNav.SelectSingleNode("file/name").InnerXml;
                    string contentValue = xNav.SelectSingleNode("file/content").InnerXml;
                    if (fileNameValue == SCNULL)
                        this.Name = string.Empty;
                    else
                        this.Name = fileNameValue;
                    if (contentValue == SCNULL)
                        this.Value = string.Empty;
                    else
                        this.Value = contentValue;
                }
            }
            else
            {
                this.Value = string.Empty;
                this.Name = string.Empty;
            }
        }

        public override string ToValue()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<file>");
            if (this.Name == null)
            {
                sb.Append("<name/>");
            }
            else
            {
                sb.Append("<name>");
                sb.Append(this.Name);
                sb.Append("</name>");
            }
            if (this.Value == null)
            {
                sb.Append("<content/>");
            }
            else
            {
                sb.Append("<content>");
                sb.Append(this.Value);
                sb.Append("</content>");
            }
            sb.Append("</file>");
            return sb.ToString();
        }

        #endregion Methods

    }

    public class HyperLinkObject : NamedObject
    {

        #region Constructors (2)

        public HyperLinkObject(string name, string value)
            : base(name, value)
        {
        }

        public HyperLinkObject(string inputValue)
            : base(inputValue)
        {
        }

        #endregion Constructors

        #region Methods (2)

        // Public Methods (2) 

        public override void FromValue(string inputValue)
        {
            if (!string.IsNullOrEmpty(inputValue))
            {
                using (StringReader reader = new StringReader(inputValue))
                {
                    XPathDocument xDoc = new XPathDocument(reader);
                    XPathNavigator xNav = xDoc.CreateNavigator();
                    string hyperLinkNameValue = xNav.SelectSingleNode("hyperlink/display").InnerXml;
                    string contentValue = xNav.SelectSingleNode("hyperlink/link").InnerXml;
                    if (hyperLinkNameValue == SCNULL)
                        this.Name = string.Empty;
                    else
                        this.Name = hyperLinkNameValue;
                    if (contentValue == SCNULL)
                        this.Value = string.Empty;
                    else
                        this.Value = contentValue;
                }
            }
            else
            {
                this.Value = string.Empty;
                this.Name = string.Empty;
            }
        }

        public override string ToValue()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<hyperlink>");
            if (this.Name == null)
            {
                sb.Append("<link/>");
            }
            else
            {
                sb.Append("<link>");
                sb.Append(this.Name);
                sb.Append("</link>");
            }
            if (this.Value == null)
            {
                sb.Append("<display/>");
            }
            else
            {
                sb.Append("<display>");
                sb.Append(this.Value);
                sb.Append("</display>");
            }
            sb.Append("</hyperlink>");
            return sb.ToString();
        }

        #endregion Methods

    }

    #endregion
}
