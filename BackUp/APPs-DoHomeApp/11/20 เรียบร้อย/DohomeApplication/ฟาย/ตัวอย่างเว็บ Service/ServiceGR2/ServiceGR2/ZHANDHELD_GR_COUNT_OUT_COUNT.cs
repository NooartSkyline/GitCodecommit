using System;
using System.Data;
using SourceCode.SmartObjects.Client;
using SourceCode.Hosting.Client.BaseAPI;
using System.Text;
using System.Data.Common;
using System.IO;
using System.Xml.XPath;


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     .Net class implementation for SmartObject ZHANDHELD_GR_COUNT_OUT_COUNT.
//     Changes to this file may cause incorrect behavior
// </auto-generated>
//------------------------------------------------------------------------------

    
namespace SmartObjects
{

    public class ZHANDHELD_GR_COUNT_OUT_COUNT : ZHANDHELD_GR_COUNT_OUT_COUNT_properties
    {
        #region Fields (4)

        private readonly string _connectionString;
        private SmartObject _smartObject;
        private const string cHOST = "192.168.0.159";
        private const uint cPORT = 5555;

        #endregion Fields

        #region Constructors (2)

        public ZHANDHELD_GR_COUNT_OUT_COUNT(string connectionString)
        {
            _connectionString = connectionString;
            this.GetSmartObject();
        }
        public ZHANDHELD_GR_COUNT_OUT_COUNT()
        {
            SCConnectionStringBuilder hostServerConnectionString = new SCConnectionStringBuilder();
            hostServerConnectionString.Host = cHOST;
            hostServerConnectionString.Port = cPORT;
            hostServerConnectionString.IsPrimaryLogin = true;
            hostServerConnectionString.Integrated = true;
            _connectionString = hostServerConnectionString.ConnectionString;
            this.GetSmartObject();
        }

        #endregion Constructors

        #region Methods (13)

        // Public Methods (7) 

        public ZHANDHELD_GR_COUNT_OUT_COUNT_properties Serialize()
        {

            // Set method to execute
            _smartObject.MethodToExecute = "Serialize";

            // Assign Input properties
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["MANDT"],MANDT);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["VBELN"],VBELN);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["POSNR"],POSNR);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["GGOODS"],GGOODS);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["SGOODS"],SGOODS);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["LGOODS"],LGOODS);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["OGOODS"],OGOODS);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["PGOODS"],PGOODS);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["GR_CONFIRM"],GR_CONFIRM);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["KUNNR_COUNTER"],KUNNR_COUNTER);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["KUNNR_INSPECT"],KUNNR_INSPECT);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["IVRKME"],IVRKME);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["KUNNR_INSPECT2"],KUNNR_INSPECT2);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["KUNNR_IBT"],KUNNR_IBT);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["PLANT_HH"],PLANT_HH);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["STGE_LOC_HH"],STGE_LOC_HH);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["RPOINT"],RPOINT);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["BATCH"],BATCH);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["LIQDT"],LIQDT);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["HSDAT"],HSDAT);
                SetPropertyValue(_smartObject.Methods["Serialize"].InputProperties["HH_DOCNO"],HH_DOCNO);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }
                // Assign Return properties
                ZHANDHELD_GR_COUNT_OUT_COUNT_properties returnProperties = GetPropertiesObject();
                returnProperties.Serialized_Item__OUT_COUNT_ = SetProperty_Serialized_Item__OUT_COUNT_(returnSmartObject.Properties["Serialized_Item__OUT_COUNT_"].Value);
                return returnProperties;

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public ZHANDHELD_GR_COUNT_OUT_COUNT_properties Deserialize()
        {

            // Set method to execute
            _smartObject.MethodToExecute = "Deserialize";

            // Assign Input properties
                SetPropertyValue(_smartObject.Methods["Deserialize"].InputProperties["Serialized_Item__OUT_COUNT_"],Serialized_Item__OUT_COUNT_);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }
                // Assign Return properties
                ZHANDHELD_GR_COUNT_OUT_COUNT_properties returnProperties = GetPropertiesObject();
                returnProperties.MANDT = SetProperty_MANDT(returnSmartObject.Properties["MANDT"].Value);
                returnProperties.VBELN = SetProperty_VBELN(returnSmartObject.Properties["VBELN"].Value);
                returnProperties.POSNR = SetProperty_POSNR(returnSmartObject.Properties["POSNR"].Value);
                returnProperties.GGOODS = SetProperty_GGOODS(returnSmartObject.Properties["GGOODS"].Value);
                returnProperties.SGOODS = SetProperty_SGOODS(returnSmartObject.Properties["SGOODS"].Value);
                returnProperties.LGOODS = SetProperty_LGOODS(returnSmartObject.Properties["LGOODS"].Value);
                returnProperties.OGOODS = SetProperty_OGOODS(returnSmartObject.Properties["OGOODS"].Value);
                returnProperties.PGOODS = SetProperty_PGOODS(returnSmartObject.Properties["PGOODS"].Value);
                returnProperties.GR_CONFIRM = SetProperty_GR_CONFIRM(returnSmartObject.Properties["GR_CONFIRM"].Value);
                returnProperties.KUNNR_COUNTER = SetProperty_KUNNR_COUNTER(returnSmartObject.Properties["KUNNR_COUNTER"].Value);
                returnProperties.KUNNR_INSPECT = SetProperty_KUNNR_INSPECT(returnSmartObject.Properties["KUNNR_INSPECT"].Value);
                returnProperties.IVRKME = SetProperty_IVRKME(returnSmartObject.Properties["IVRKME"].Value);
                returnProperties.KUNNR_INSPECT2 = SetProperty_KUNNR_INSPECT2(returnSmartObject.Properties["KUNNR_INSPECT2"].Value);
                returnProperties.KUNNR_IBT = SetProperty_KUNNR_IBT(returnSmartObject.Properties["KUNNR_IBT"].Value);
                returnProperties.PLANT_HH = SetProperty_PLANT_HH(returnSmartObject.Properties["PLANT_HH"].Value);
                returnProperties.STGE_LOC_HH = SetProperty_STGE_LOC_HH(returnSmartObject.Properties["STGE_LOC_HH"].Value);
                returnProperties.RPOINT = SetProperty_RPOINT(returnSmartObject.Properties["RPOINT"].Value);
                returnProperties.BATCH = SetProperty_BATCH(returnSmartObject.Properties["BATCH"].Value);
                returnProperties.LIQDT = SetProperty_LIQDT(returnSmartObject.Properties["LIQDT"].Value);
                returnProperties.HSDAT = SetProperty_HSDAT(returnSmartObject.Properties["HSDAT"].Value);
                returnProperties.HH_DOCNO = SetProperty_HH_DOCNO(returnSmartObject.Properties["HH_DOCNO"].Value);
                return returnProperties;

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public ZHANDHELD_GR_COUNT_OUT_COUNT_properties SerializeAddItemToArray()
        {

            // Set method to execute
            _smartObject.MethodToExecute = "SerializeAddItemToArray";

            // Assign Input properties
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["Serialized_Array__OUT_COUNT___"],Serialized_Array__OUT_COUNT___);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["MANDT"],MANDT);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["VBELN"],VBELN);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["POSNR"],POSNR);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["GGOODS"],GGOODS);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["SGOODS"],SGOODS);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["LGOODS"],LGOODS);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["OGOODS"],OGOODS);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["PGOODS"],PGOODS);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["GR_CONFIRM"],GR_CONFIRM);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["KUNNR_COUNTER"],KUNNR_COUNTER);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["KUNNR_INSPECT"],KUNNR_INSPECT);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["IVRKME"],IVRKME);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["KUNNR_INSPECT2"],KUNNR_INSPECT2);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["KUNNR_IBT"],KUNNR_IBT);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["PLANT_HH"],PLANT_HH);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["STGE_LOC_HH"],STGE_LOC_HH);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["RPOINT"],RPOINT);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["BATCH"],BATCH);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["LIQDT"],LIQDT);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["HSDAT"],HSDAT);
                SetPropertyValue(_smartObject.Methods["SerializeAddItemToArray"].InputProperties["HH_DOCNO"],HH_DOCNO);

            try
            {
                SmartObjectClientServer soServer = CreateConnection();
                SmartObject returnSmartObject;

                // Execute SmartObject
                using (soServer.Connection)
                {
                    returnSmartObject = soServer.ExecuteScalar(_smartObject);
                }
                // Assign Return properties
                ZHANDHELD_GR_COUNT_OUT_COUNT_properties returnProperties = GetPropertiesObject();
                returnProperties.Serialized_Array__OUT_COUNT___ = SetProperty_Serialized_Array__OUT_COUNT___(returnSmartObject.Properties["Serialized_Array__OUT_COUNT___"].Value);
                return returnProperties;

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public DataTable DeserializeArray()        {

            // Set method to execute
            _smartObject.MethodToExecute = "DeserializeArray";

            // Assign Input properties
            if (Serialized_Array__OUT_COUNT___ != null)
            {
                SetPropertyValue(_smartObject.ListMethods["DeserializeArray"].InputProperties["Serialized_Array__OUT_COUNT___"],Serialized_Array__OUT_COUNT___);
            }

            try
            {
                SmartObjectClientServer soServer = CreateConnection();

                // Execute SmartObject
                using (soServer.Connection)
                {
                    return soServer.ExecuteListDataTable(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public DbDataReader DeserializeArray_Reader()        {

            // Set method to execute
            _smartObject.MethodToExecute = "DeserializeArray";

            // Assign Input properties
            if (Serialized_Array__OUT_COUNT___ != null)
            {
                SetPropertyValue(_smartObject.ListMethods["DeserializeArray"].InputProperties["Serialized_Array__OUT_COUNT___"],Serialized_Array__OUT_COUNT___);
            }

            try
            {
                SmartObjectClientServer soServer = CreateConnection();

                // Execute SmartObject
                using (soServer.Connection)
                {
                    return soServer.ExecuteListReader(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }


        public DataTable DeserializeTypedArray()        {

            // Set method to execute
            _smartObject.MethodToExecute = "DeserializeTypedArray";

            // Assign Input properties
            if (Serialized_Array__OUT_COUNT___ != null)
            {
                SetPropertyValue(_smartObject.ListMethods["DeserializeTypedArray"].InputProperties["Serialized_Array__OUT_COUNT___"],Serialized_Array__OUT_COUNT___);
            }

            try
            {
                SmartObjectClientServer soServer = CreateConnection();

                // Execute SmartObject
                using (soServer.Connection)
                {
                    return soServer.ExecuteListDataTable(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }

        public DbDataReader DeserializeTypedArray_Reader()        {

            // Set method to execute
            _smartObject.MethodToExecute = "DeserializeTypedArray";

            // Assign Input properties
            if (Serialized_Array__OUT_COUNT___ != null)
            {
                SetPropertyValue(_smartObject.ListMethods["DeserializeTypedArray"].InputProperties["Serialized_Array__OUT_COUNT___"],Serialized_Array__OUT_COUNT___);
            }

            try
            {
                SmartObjectClientServer soServer = CreateConnection();

                // Execute SmartObject
                using (soServer.Connection)
                {
                    return soServer.ExecuteListReader(_smartObject);
                }

            }
            catch (Exception ex)
            {
                throw DisplayError(ex);
            }
            finally
            {
                ClearProperties();
            }
        }


        // Private Methods (6) 

        private void ClearProperties()
        {
            foreach (SmartProperty property in _smartObject.Properties)
            {
                property.Clear();
                property.ValueBehaviour = ValueBehaviour.None;
            }
        }

        private SmartObjectClientServer CreateConnection()
        {
            SmartObjectClientServer soServer = new SmartObjectClientServer();
            soServer.CreateConnection();
            soServer.Connection.Open(_connectionString);
            return soServer;
        }

        private Exception DisplayError(Exception ex)
        {
            if (ex is SmartObjectException)
            {
                return DisplayError(ex as SmartObjectException);
            }
            else
            {
                return ex;
            }
        }

        private Exception DisplayError(SmartObjectException smartObjectException)
        {
            StringBuilder errorMessage = new StringBuilder();
            foreach (SmartObjectExceptionData smartobjectExceptionData in smartObjectException.BrokerData)
            {
                string message = smartobjectExceptionData.Message;
                string service = smartobjectExceptionData.ServiceName;
                string serviceGuid = smartobjectExceptionData.ServiceGuid;
                string severity = smartobjectExceptionData.Severity.ToString();
                string innermessage = smartobjectExceptionData.InnerExceptionMessage;
                errorMessage.AppendLine(message);
                errorMessage.AppendLine();
                errorMessage.AppendLine("Service: " + service);
                errorMessage.AppendLine("Service Guid: " + serviceGuid);
                errorMessage.AppendLine("Severity: " + severity);
                if (!string.IsNullOrEmpty(innermessage))
                {
                    errorMessage.AppendLine("InnerException Message: " + innermessage);
                }
            }
            return new Exception(errorMessage.ToString());
        }

        private void GetSmartObject()
        {
            SmartObjectClientServer clientServer = CreateConnection();
            using (clientServer.Connection)
            {
                _smartObject = clientServer.GetSmartObject("ZHANDHELD_GR_COUNT_OUT_COUNT");
            }
        }

  private static void SetPropertyValue(SmartProperty smartProperty, object value)
        {
            if (value == null)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Unchanged;
                smartProperty.Value = null;
            }
            else if (value == DBNull.Value)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Clear;
                smartProperty.Value = null;
            }
            else if (value.ToString() == string.Empty)
            {
                smartProperty.ValueBehaviour = ValueBehaviour.Empty;
                smartProperty.Value = string.Empty;
            }
            else
            {
                smartProperty.ValueBehaviour = ValueBehaviour.None;
                smartProperty.Value = value.ToString();
            }
        }

        #endregion Methods
    }

 public class ZHANDHELD_GR_COUNT_OUT_COUNT_properties
    {
        #region Fields (23)

        private string _MANDT;
        private string _VBELN;
        private double? _POSNR;
        private double? _GGOODS;
        private double? _SGOODS;
        private double? _LGOODS;
        private double? _OGOODS;
        private double? _PGOODS;
        private string _GR_CONFIRM;
        private string _KUNNR_COUNTER;
        private string _KUNNR_INSPECT;
        private string _IVRKME;
        private string _KUNNR_INSPECT2;
        private string _KUNNR_IBT;
        private string _PLANT_HH;
        private string _STGE_LOC_HH;
        private string _RPOINT;
        private string _BATCH;
        private DateTime? _LIQDT;
        private DateTime? _HSDAT;
        private string _HH_DOCNO;
        private string _Serialized_Item__OUT_COUNT_;
        private string _Serialized_Array__OUT_COUNT___;

        #endregion Fields

        #region Constructors (1)

        protected ZHANDHELD_GR_COUNT_OUT_COUNT_properties()
        {
        }

        #endregion Constructors

        #region Properties (23)

        public string MANDT
        {
            get
            {
                return _MANDT;
            }
            set
            {
                _MANDT = value;
            }
        }

        public string VBELN
        {
            get
            {
                return _VBELN;
            }
            set
            {
                _VBELN = value;
            }
        }

        public double? POSNR
        {
            get
            {
                return _POSNR;
            }
            set
            {
                _POSNR = value;
            }
        }

        public double? GGOODS
        {
            get
            {
                return _GGOODS;
            }
            set
            {
                _GGOODS = value;
            }
        }

        public double? SGOODS
        {
            get
            {
                return _SGOODS;
            }
            set
            {
                _SGOODS = value;
            }
        }

        public double? LGOODS
        {
            get
            {
                return _LGOODS;
            }
            set
            {
                _LGOODS = value;
            }
        }

        public double? OGOODS
        {
            get
            {
                return _OGOODS;
            }
            set
            {
                _OGOODS = value;
            }
        }

        public double? PGOODS
        {
            get
            {
                return _PGOODS;
            }
            set
            {
                _PGOODS = value;
            }
        }

        public string GR_CONFIRM
        {
            get
            {
                return _GR_CONFIRM;
            }
            set
            {
                _GR_CONFIRM = value;
            }
        }

        public string KUNNR_COUNTER
        {
            get
            {
                return _KUNNR_COUNTER;
            }
            set
            {
                _KUNNR_COUNTER = value;
            }
        }

        public string KUNNR_INSPECT
        {
            get
            {
                return _KUNNR_INSPECT;
            }
            set
            {
                _KUNNR_INSPECT = value;
            }
        }

        public string IVRKME
        {
            get
            {
                return _IVRKME;
            }
            set
            {
                _IVRKME = value;
            }
        }

        public string KUNNR_INSPECT2
        {
            get
            {
                return _KUNNR_INSPECT2;
            }
            set
            {
                _KUNNR_INSPECT2 = value;
            }
        }

        public string KUNNR_IBT
        {
            get
            {
                return _KUNNR_IBT;
            }
            set
            {
                _KUNNR_IBT = value;
            }
        }

        public string PLANT_HH
        {
            get
            {
                return _PLANT_HH;
            }
            set
            {
                _PLANT_HH = value;
            }
        }

        public string STGE_LOC_HH
        {
            get
            {
                return _STGE_LOC_HH;
            }
            set
            {
                _STGE_LOC_HH = value;
            }
        }

        public string RPOINT
        {
            get
            {
                return _RPOINT;
            }
            set
            {
                _RPOINT = value;
            }
        }

        public string BATCH
        {
            get
            {
                return _BATCH;
            }
            set
            {
                _BATCH = value;
            }
        }

        public DateTime? LIQDT
        {
            get
            {
                return _LIQDT;
            }
            set
            {
                _LIQDT = value;
            }
        }

        public DateTime? HSDAT
        {
            get
            {
                return _HSDAT;
            }
            set
            {
                _HSDAT = value;
            }
        }

        public string HH_DOCNO
        {
            get
            {
                return _HH_DOCNO;
            }
            set
            {
                _HH_DOCNO = value;
            }
        }

        public string Serialized_Item__OUT_COUNT_
        {
            get
            {
                return _Serialized_Item__OUT_COUNT_;
            }
            set
            {
                _Serialized_Item__OUT_COUNT_ = value;
            }
        }

        public string Serialized_Array__OUT_COUNT___
        {
            get
            {
                return _Serialized_Array__OUT_COUNT___;
            }
            set
            {
                _Serialized_Array__OUT_COUNT___ = value;
            }
        }


        #endregion Properties

        #region Methods (24)

        // Protected Methods (24) 
        protected ZHANDHELD_GR_COUNT_OUT_COUNT_properties GetPropertiesObject()
        {
            return new ZHANDHELD_GR_COUNT_OUT_COUNT_properties();
        }

        protected static string SetProperty_MANDT(string MANDT)
        {
                        if(MANDT == null)
            {
                return null;
            }


            if(MANDT == string.Empty)
            {
                return null;
            }

            return MANDT;
        }

        protected static string SetProperty_VBELN(string VBELN)
        {
                        if(VBELN == null)
            {
                return null;
            }


            if(VBELN == string.Empty)
            {
                return null;
            }

            return VBELN;
        }

        protected static double? SetProperty_POSNR(string POSNR)
        {
                        if(POSNR == null)
            {
                return null;
            }


            if(POSNR == string.Empty)
            {
                return null;
            }

            return double.Parse(POSNR);
        }

        protected static double? SetProperty_GGOODS(string GGOODS)
        {
                        if(GGOODS == null)
            {
                return null;
            }


            if(GGOODS == string.Empty)
            {
                return null;
            }

            return double.Parse(GGOODS);
        }

        protected static double? SetProperty_SGOODS(string SGOODS)
        {
                        if(SGOODS == null)
            {
                return null;
            }


            if(SGOODS == string.Empty)
            {
                return null;
            }

            return double.Parse(SGOODS);
        }

        protected static double? SetProperty_LGOODS(string LGOODS)
        {
                        if(LGOODS == null)
            {
                return null;
            }


            if(LGOODS == string.Empty)
            {
                return null;
            }

            return double.Parse(LGOODS);
        }

        protected static double? SetProperty_OGOODS(string OGOODS)
        {
                        if(OGOODS == null)
            {
                return null;
            }


            if(OGOODS == string.Empty)
            {
                return null;
            }

            return double.Parse(OGOODS);
        }

        protected static double? SetProperty_PGOODS(string PGOODS)
        {
                        if(PGOODS == null)
            {
                return null;
            }


            if(PGOODS == string.Empty)
            {
                return null;
            }

            return double.Parse(PGOODS);
        }

        protected static string SetProperty_GR_CONFIRM(string GR_CONFIRM)
        {
                        if(GR_CONFIRM == null)
            {
                return null;
            }


            if(GR_CONFIRM == string.Empty)
            {
                return null;
            }

            return GR_CONFIRM;
        }

        protected static string SetProperty_KUNNR_COUNTER(string KUNNR_COUNTER)
        {
                        if(KUNNR_COUNTER == null)
            {
                return null;
            }


            if(KUNNR_COUNTER == string.Empty)
            {
                return null;
            }

            return KUNNR_COUNTER;
        }

        protected static string SetProperty_KUNNR_INSPECT(string KUNNR_INSPECT)
        {
                        if(KUNNR_INSPECT == null)
            {
                return null;
            }


            if(KUNNR_INSPECT == string.Empty)
            {
                return null;
            }

            return KUNNR_INSPECT;
        }

        protected static string SetProperty_IVRKME(string IVRKME)
        {
                        if(IVRKME == null)
            {
                return null;
            }


            if(IVRKME == string.Empty)
            {
                return null;
            }

            return IVRKME;
        }

        protected static string SetProperty_KUNNR_INSPECT2(string KUNNR_INSPECT2)
        {
                        if(KUNNR_INSPECT2 == null)
            {
                return null;
            }


            if(KUNNR_INSPECT2 == string.Empty)
            {
                return null;
            }

            return KUNNR_INSPECT2;
        }

        protected static string SetProperty_KUNNR_IBT(string KUNNR_IBT)
        {
                        if(KUNNR_IBT == null)
            {
                return null;
            }


            if(KUNNR_IBT == string.Empty)
            {
                return null;
            }

            return KUNNR_IBT;
        }

        protected static string SetProperty_PLANT_HH(string PLANT_HH)
        {
                        if(PLANT_HH == null)
            {
                return null;
            }


            if(PLANT_HH == string.Empty)
            {
                return null;
            }

            return PLANT_HH;
        }

        protected static string SetProperty_STGE_LOC_HH(string STGE_LOC_HH)
        {
                        if(STGE_LOC_HH == null)
            {
                return null;
            }


            if(STGE_LOC_HH == string.Empty)
            {
                return null;
            }

            return STGE_LOC_HH;
        }

        protected static string SetProperty_RPOINT(string RPOINT)
        {
                        if(RPOINT == null)
            {
                return null;
            }


            if(RPOINT == string.Empty)
            {
                return null;
            }

            return RPOINT;
        }

        protected static string SetProperty_BATCH(string BATCH)
        {
                        if(BATCH == null)
            {
                return null;
            }


            if(BATCH == string.Empty)
            {
                return null;
            }

            return BATCH;
        }

        protected static DateTime? SetProperty_LIQDT(string LIQDT)
        {
                        if(LIQDT == null)
            {
                return null;
            }


            if(LIQDT == string.Empty)
            {
                return null;
            }

            return Convert.ToDateTime(LIQDT);
        }

        protected static DateTime? SetProperty_HSDAT(string HSDAT)
        {
                        if(HSDAT == null)
            {
                return null;
            }


            if(HSDAT == string.Empty)
            {
                return null;
            }

            return Convert.ToDateTime(HSDAT);
        }

        protected static string SetProperty_HH_DOCNO(string HH_DOCNO)
        {
                        if(HH_DOCNO == null)
            {
                return null;
            }


            if(HH_DOCNO == string.Empty)
            {
                return null;
            }

            return HH_DOCNO;
        }

        protected static string SetProperty_Serialized_Item__OUT_COUNT_(string Serialized_Item__OUT_COUNT_)
        {
                        if(Serialized_Item__OUT_COUNT_ == null)
            {
                return null;
            }


            if(Serialized_Item__OUT_COUNT_ == string.Empty)
            {
                return null;
            }

            return Serialized_Item__OUT_COUNT_;
        }

        protected static string SetProperty_Serialized_Array__OUT_COUNT___(string Serialized_Array__OUT_COUNT___)
        {
                        if(Serialized_Array__OUT_COUNT___ == null)
            {
                return null;
            }


            if(Serialized_Array__OUT_COUNT___ == string.Empty)
            {
                return null;
            }

            return Serialized_Array__OUT_COUNT___;
        }


        #endregion Methods

    }
    /*
   #region Object Classes

    public abstract class NamedObject
    {

        #region Fields (3)

        private string _name;
        private string _value;
        protected const string SCNULL = "scnull";

        #endregion Fields

        #region Constructors (2)

        public NamedObject(string name, string value)
        {
            _name = name;
            _value = value;
        }

        public NamedObject(string inputValue)
        {
            this.FromValue(inputValue);
        }

        #endregion Constructors

        #region Properties (2)

        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        #endregion Properties

        #region Methods (3)

        // Public Methods (3) 

        public abstract void FromValue(string inputValue);

        public override string ToString()
        {
            return ToValue();
        }

        public abstract string ToValue();

        #endregion Methods

    }

    public class ImageObject : NamedObject
    {

        #region Constructors (2)

        public ImageObject(string name, string value)
            : base(name, value)
        {
        }

        public ImageObject(string inputValue)
            : base(inputValue)
        {
        }

        #endregion Constructors

        #region Methods (2)

        // Public Methods (2) 
        public override void FromValue(string inputValue)
        {
            if (!string.IsNullOrEmpty(inputValue))
            {
                using (StringReader reader = new StringReader(inputValue))
                {
                    XPathDocument xDoc = new XPathDocument(reader);
                    XPathNavigator xNav = xDoc.CreateNavigator();
                    string imageNameValue = xNav.SelectSingleNode("image/name").InnerXml;
                    string contentValue = xNav.SelectSingleNode("image/content").InnerXml;
                    if (imageNameValue == SCNULL)
                        this.Name = string.Empty;
                    else
                        this.Name = imageNameValue;
                    if (contentValue == SCNULL)
                        this.Value = string.Empty;
                    else
                        this.Value = contentValue;
                }
            }
            else
            {
                this.Value = string.Empty;
                this.Name = string.Empty;
            }
        }

        public override string ToValue()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<image>");
            if (this.Name == null)
            {
                sb.Append("<name/>");
            }
            else
            {
                sb.Append("<name>");
                sb.Append(this.Name);
                sb.Append("</name>");
            }
            if (this.Value == null)
            {
                sb.Append("<content/>");
            }
            else
            {
                sb.Append("<content>");
                sb.Append(this.Value);
                sb.Append("</content>");
            }
            sb.Append("</image>");
            return sb.ToString();
        }

        #endregion Methods

    }

    public class FileObject : NamedObject
    {

        #region Constructors (2)

        public FileObject(string name, string value)
            : base(name, value)
        {
        }

        public FileObject(string inputValue)
            : base(inputValue)
        {
        }

        #endregion Constructors

        #region Methods (2)

        // Public Methods (2) 
        public override void FromValue(string inputValue)
        {
            if (!string.IsNullOrEmpty(inputValue))
            {
                using (StringReader reader = new StringReader(inputValue))
                {
                    XPathDocument xDoc = new XPathDocument(reader);
                    XPathNavigator xNav = xDoc.CreateNavigator();
                    string fileNameValue = xNav.SelectSingleNode("file/name").InnerXml;
                    string contentValue = xNav.SelectSingleNode("file/content").InnerXml;
                    if (fileNameValue == SCNULL)
                        this.Name = string.Empty;
                    else
                        this.Name = fileNameValue;
                    if (contentValue == SCNULL)
                        this.Value = string.Empty;
                    else
                        this.Value = contentValue;
                }
            }
            else
            {
                this.Value = string.Empty;
                this.Name = string.Empty;
            }
        }

        public override string ToValue()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<file>");
            if (this.Name == null)
            {
                sb.Append("<name/>");
            }
            else
            {
                sb.Append("<name>");
                sb.Append(this.Name);
                sb.Append("</name>");
            }
            if (this.Value == null)
            {
                sb.Append("<content/>");
            }
            else
            {
                sb.Append("<content>");
                sb.Append(this.Value);
                sb.Append("</content>");
            }
            sb.Append("</file>");
            return sb.ToString();
        }

        #endregion Methods

    }

    public class HyperLinkObject : NamedObject
    {

        #region Constructors (2)

        public HyperLinkObject(string name, string value)
            : base(name, value)
        {
        }

        public HyperLinkObject(string inputValue)
            : base(inputValue)
        {
        }

        #endregion Constructors

        #region Methods (2)

        // Public Methods (2) 

        public override void FromValue(string inputValue)
        {
            if (!string.IsNullOrEmpty(inputValue))
            {
                using (StringReader reader = new StringReader(inputValue))
                {
                    XPathDocument xDoc = new XPathDocument(reader);
                    XPathNavigator xNav = xDoc.CreateNavigator();
                    string hyperLinkNameValue = xNav.SelectSingleNode("hyperlink/display").InnerXml;
                    string contentValue = xNav.SelectSingleNode("hyperlink/link").InnerXml;
                    if (hyperLinkNameValue == SCNULL)
                        this.Name = string.Empty;
                    else
                        this.Name = hyperLinkNameValue;
                    if (contentValue == SCNULL)
                        this.Value = string.Empty;
                    else
                        this.Value = contentValue;
                }
            }
            else
            {
                this.Value = string.Empty;
                this.Name = string.Empty;
            }
        }

        public override string ToValue()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<hyperlink>");
            if (this.Name == null)
            {
                sb.Append("<link/>");
            }
            else
            {
                sb.Append("<link>");
                sb.Append(this.Name);
                sb.Append("</link>");
            }
            if (this.Value == null)
            {
                sb.Append("<display/>");
            }
            else
            {
                sb.Append("<display>");
                sb.Append(this.Value);
                sb.Append("</display>");
            }
            sb.Append("</hyperlink>");
            return sb.ToString();
        }

        #endregion Methods

    }

    #endregion
    */
}
